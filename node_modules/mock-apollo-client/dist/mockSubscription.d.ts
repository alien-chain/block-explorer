/// <reference types="zen-observable" />
import { FetchResult } from '@apollo/client/core';
import type { RequestHandlerResponse } from './mockClient';
export interface IMockSubscription<TData = any> {
    readonly closed: boolean;
    next: (value: RequestHandlerResponse<TData>) => void;
    error: (errorValue: any) => void;
    complete: () => void;
}
export declare type MockSubscriptionOptions = {
    disableLogging?: boolean;
};
export declare class MockSubscription<TData = any> implements IMockSubscription<TData> {
    private observer?;
    private loggingDisabled;
    constructor(options?: MockSubscriptionOptions);
    subscribe(observer: ZenObservable.SubscriptionObserver<FetchResult>): void;
    get closed(): boolean;
    next(value: RequestHandlerResponse<TData>): void;
    error(errorValue: any): void;
    complete(): void;
    private verifyState;
}
export declare const createMockSubscription: <TData = any>(options?: MockSubscriptionOptions | undefined) => IMockSubscription<TData>;
